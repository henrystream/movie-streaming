// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (title, genre, year)
VALUES ($1, $2, $3)
RETURNING id, title, genre, year
`

type CreateMovieParams struct {
	Title string
	Genre string
	Year  int32
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, createMovie, arg.Title, arg.Genre, arg.Year)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Genre,
		&i.Year,
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :execrows
DELETE FROM movies WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deleteMovie, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getMovie = `-- name: GetMovie :one
SELECT id, title, genre, year FROM movies WHERE id = $1
`

func (q *Queries) GetMovie(ctx context.Context, id int32) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Genre,
		&i.Year,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT id, title, genre, year FROM movies
`

func (q *Queries) ListMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.Query(ctx, listMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Genre,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies SET title = $2, genre = $3, year = $4
WHERE id = $1
RETURNING id, title, genre, year
`

type UpdateMovieParams struct {
	ID    int32
	Title string
	Genre string
	Year  int32
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, updateMovie,
		arg.ID,
		arg.Title,
		arg.Genre,
		arg.Year,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Genre,
		&i.Year,
	)
	return i, err
}
