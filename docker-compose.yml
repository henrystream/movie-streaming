services:
  user-service:
    build:
      context: ./user-service
    ports:
      - "8081:8081"
    environment:
      - POSTGRES_HOST=postgres-users
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=users
      - KAFKA_BROKER=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      postgres-users:
        condition: service_healthy
    networks:
      - app-network
  movie-service:
    build:
      context: ./movie-service
    ports:
      - "8082:8082"
    environment:
      - POSTGRES_HOST=postgres-movies
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=movies
      - KAFKA_BROKER=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      kafka:
        condition: service_healthy
      postgres-movies:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
  rest-gateway:
    build:
      context: ./rest-gateway
    ports:
      - "8080:8080"
    environment:
      - GIN_MODE=release
    depends_on:
      - user-service
      - movie-service
    networks:
      - app-network

  postgres-users:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    ports:
      - "5433:5432" # Map to 5433 on host to avoid conflict with postgres-movies
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-users-data:/var/lib/postgresql/data
    networks:
      - app-network

  postgres-movies:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=movies
    ports:
      - "5432:5432" # Keep 5432 for movies as primary
    volumes:
      - postgres-movies-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]  # Simpler check: test port availability
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    depends_on:
      - zookeeper
    networks:
      - app-network
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc -w 2 zookeeper 2181 && echo imok"]
      interval: 10s
      timeout: 5s
      retries: 10
    command: >
      sh -c "echo '4lw.commands.whitelist=ruok' >> /etc/confluent/docker/zookeeper.properties && /etc/confluent/docker/run"

  
    networks:
      - app-network
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres-users-data:
  postgres-movies-data:

networks:
  app-network:
    driver: bridge